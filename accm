#! /usr/bin/python

# Imports
import sys

# Jam imports
from libjam import Captain, Drawer, Typewriter, Clipboard, Notebook, Flashcard

# Jam classes
captain = Captain()
drawer = Drawer()
typewriter = Typewriter()
clipboard = Clipboard()
notebook = Notebook()
flashcard = Flashcard()

# Internal imports
from config_manager import ConfigManager
from data import Data

data = Data()

# Handling config
HOME = drawer.get_home()
CONFIG_DIR = f"{HOME}/.config/accm"
CONFIG_FILE = f"{CONFIG_DIR}/config.toml"
notebook.check_config(CONFIG_FILE)
config = notebook.read_toml(CONFIG_FILE)

## Likely AC_DIR locations
assettocorsa = data.get('ac_path_suffix')
likely_ac_dirs = data.get('likely_ac_dirs')
## Getting AC_DIR
AC_DIR = config.get('paths').get("AC_DIR")
if AC_DIR == None:
  for directory in likely_ac_dirs:
    if drawer.is_folder(directory):
      AC_DIR = directory
# Checking AC_DIR
if AC_DIR == None:
  print(f"Assetto Corsa folder not found.\n\
If Assetto Corsa is not installed in the default location, you might need to specify the path to '{assettocorsa}' in '{CONFIG_FILE}'.")
  sys.exit(-1)
elif drawer.is_folder(AC_DIR) is False:
  print(f"Path to Assetto Corsa's folder specified in '{CONFIG_FILE}' does not exist.")
  sys.exit(-1)
elif AC_DIR.endswith(assettocorsa) is False:
  print(f'''Path to Assetto Corsa in '{CONFIG_FILE}' is incorrect. It should end with '{assettocorsa}'.)
Currently specified AC directory:\n{AC_DIR}''')
  sys.exit(-1)
config['paths']['AC_DIR'] = AC_DIR

## Likely config locations
cfg_path_suffix = data.get('cfg_path_suffix')
likely_cfg_dirs = data.get('likely_cfg_dirs')
## Getting AC_DIR
CFG_DIR = config.get('paths').get("CFG_DIR")
if CFG_DIR == None:
  for directory in likely_cfg_dirs:
    if drawer.is_folder(directory):
      CFG_DIR = directory
# Checking CFG_DIR
if CFG_DIR == None:
  print(f"Assetto Corsa's configuration folder not found.\n\
If Assetto Corsa's configuration is not installed in the default location, you might need to specify the path to '{cfg_path_suffix}' in '{CONFIG_FILE}'.")
  sys.exit(-1)
elif drawer.is_folder(CFG_DIR) is False:
  print(f"Path to configuration folder specified in '{CONFIG_FILE}' does not exist.")
  sys.exit(-1)
elif CFG_DIR.endswith(cfg_path_suffix) is False:
  print(f'''Path to Assetto Corsa's configuration in '{CONFIG_FILE}' is incorrect. It should end with '{cfg_path_suffix}'.)
Currently specified AC directory:\n{CFG_DIR}''')
  sys.exit(-1)
config['paths']['CFG_DIR'] = CFG_DIR

# The command line interface functions
class CLI:
  # Interface to list installed mods
  def list(self):
    configs = config_manager.get_configs()
    print(typewriter.list_to_columns(configs, None, 2))

  def view(self, path_to_config):
    configs = config_manager.get_configs()
    self.print_config_contents(configs, path_to_config)

  def view_defaults(self, path_to_config):
    configs = config_manager.get_configs(defaults=True)
    self.print_config_contents(configs, path_to_config)

  def print_config_contents(self, configs, path_to_config):
    for config in configs:
      if path_to_config == config:
        contents = configs.get(config)
        content_list = []
        for item in contents:
          value = contents.get(item)
          content_list.append(f"{item} = '{value}'")
        print(typewriter.list_to_columns(content_list, None, 2))

  def set(self, path_to_config, config_item, value):
    configs = config_manager.get_configs()
    done = False
    for config in configs:
      if path_to_config == config:
        contents = configs.get(config)
        contents[config_item] = value
        config_manager.write_config(path_to_config, contents)
        done = True
    if done is False:
      print(f"Config '{path_to_config}' does not exist.")


cli = CLI()

# Inputs/Commands/Options configuration
app = "acmm"
description = "A configuration manager for Assetto Corsa"
# help = "" # If you wish to set your own help page text
commands = {
  'list': {'function': cli.list,
  'description': 'Lists config files'},

  'view': {'function': cli.view,
  'description': 'Lists contents of a given config'},

  'view-defaults': {'function': cli.view_defaults,
  'description': 'Lists the default contents of a given config'},

  'set': {'function': cli.set,
  'description': 'Sets a given value for a given variable in a given config'},
}
# options = {
#   'example':      {'long': ['example'],           'short': ['e'],
#   'description': 'Example'},
# }

# Parsing user input
arguments = sys.argv
arguments.remove(arguments[0])
help = captain.generate_help(app, description, commands)
interpretation = captain.interpret(app, help, commands, arguments)
function = interpretation.get('function')
options = interpretation.get('options')

# Passing options to mod_manager
config_manager = ConfigManager(config)

# Executing function
exec(f"cli.{function}")
